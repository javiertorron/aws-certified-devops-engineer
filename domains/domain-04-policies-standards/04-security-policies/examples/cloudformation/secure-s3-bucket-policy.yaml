AWSTemplateFormatVersion: '2010-09-09'
Description: 'Secure S3 bucket with comprehensive security policies'

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket
    Default: secure-data-bucket
  
  KMSKeyId:
    Type: String
    Description: KMS Key ID for bucket encryption
    Default: alias/aws/s3

Resources:
  # KMS Key for S3 Encryption
  S3EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for S3 bucket encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow S3 Service
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'

  # KMS Key Alias
  S3EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${BucketName}-key'
      TargetKeyId: !Ref S3EncryptionKey

  # Secure S3 Bucket
  SecureS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      # Enable versioning for data protection
      VersioningConfiguration:
        Status: Enabled
      
      # Configure server-side encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3EncryptionKey
            BucketKeyEnabled: true
      
      # Enable MFA delete protection
      MfaDelete: Enabled
      
      # Configure access logging
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogBucket
        LogFilePrefix: access-logs/
      
      # Configure notification for security events
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
        
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt SecurityValidationFunction.Arn
      
      # Block all public access
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      
      # Configure lifecycle policy
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            ExpirationInDays: 2555  # 7 years
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 365
                StorageClass: DEEP_ARCHIVE
            NoncurrentVersionTransitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            NoncurrentVersionExpirationInDays: 365

  # Access Log Bucket
  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-access-logs'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Comprehensive Bucket Policy
  SecureS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SecureS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Deny insecure transport
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub '${SecureS3Bucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
          
          # Require encryption for uploads
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub '${SecureS3Bucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          
          # Require specific KMS key
          - Sid: RequireSpecificKMSKey
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub '${SecureS3Bucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption-aws-kms-key-id': !Ref S3EncryptionKey
          
          # Deny uploads from specific IP ranges (example)
          - Sid: DenyUntrustedIPAddresses
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub '${SecureS3Bucket.Arn}/*'
            Condition:
              IpAddressIfExists:
                'aws:SourceIp':
                  - 10.0.0.0/8
                  - 172.16.0.0/12
                  - 192.168.0.0/16
              Bool:
                'aws:ViaAWSService': 'false'
          
          # Allow only specific AWS services
          - Sid: AllowAWSServices
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Sub '${SecureS3Bucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'

  # CloudWatch Log Group for S3 events
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${BucketName}'
      RetentionInDays: 90

  # Lambda function for security validation
  SecurityValidationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${BucketName}-security-validator'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SecurityValidationRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import urllib.parse
          
          def lambda_handler(event, context):
              s3_client = boto3.client('s3')
              sns_client = boto3.client('sns')
              
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = urllib.parse.unquote_plus(record['s3']['object']['key'])
                  
                  try:
                      # Check object metadata
                      response = s3_client.head_object(Bucket=bucket, Key=key)
                      
                      # Validate encryption
                      encryption = response.get('ServerSideEncryption', 'None')
                      if encryption != 'aws:kms':
                          # Send alert
                          sns_client.publish(
                              TopicArn=os.environ['SNS_TOPIC_ARN'],
                              Message=f'Unencrypted object detected: {key} in bucket {bucket}',
                              Subject='S3 Security Violation'
                          )
                          
                          # Optionally delete non-compliant object
                          s3_client.delete_object(Bucket=bucket, Key=key)
                      
                      # Check for sensitive data patterns
                      if any(pattern in key.lower() for pattern in ['password', 'secret', 'key', 'token']):
                          sns_client.publish(
                              TopicArn=os.environ['SNS_TOPIC_ARN'],
                              Message=f'Potentially sensitive file uploaded: {key}',
                              Subject='S3 Sensitive Data Alert'
                          )
                  
                  except Exception as e:
                      print(f'Error processing {key}: {str(e)}')
              
              return {'statusCode': 200}

  # IAM Role for Lambda function
  SecurityValidationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3SecurityValidationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectMetadata'
                  - 's3:DeleteObject'
                Resource: !Sub '${SecureS3Bucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref SecurityAlertTopic

  # Lambda permission for S3 to invoke function
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SecurityValidationFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt SecureS3Bucket.Arn

  # SNS Topic for security alerts
  SecurityAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${BucketName}-security-alerts'
      DisplayName: S3 Security Alerts

  # CloudWatch Alarm for unauthorized access attempts
  UnauthorizedAccessAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${BucketName}-unauthorized-access'
      AlarmDescription: Alarm for detecting unauthorized S3 access attempts
      MetricName: 4xxErrors
      Namespace: AWS/S3
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: BucketName
          Value: !Ref SecureS3Bucket
      AlarmActions:
        - !Ref SecurityAlertTopic

Outputs:
  BucketName:
    Description: Name of the created S3 bucket
    Value: !Ref SecureS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketArn:
    Description: ARN of the created S3 bucket
    Value: !GetAtt SecureS3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BucketArn'

  KMSKeyId:
    Description: KMS Key ID used for bucket encryption
    Value: !Ref S3EncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  SecurityAlertTopicArn:
    Description: ARN of the security alert SNS topic
    Value: !Ref SecurityAlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAlertTopic'