AWSTemplateFormatVersion: '2010-09-09'
Description: 'Comprehensive IAM security policies for DevOps environments'

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
    Default: devops-security
  
  Environment:
    Type: String
    Description: Environment name
    Default: production
    AllowedValues:
      - development
      - staging
      - production

Resources:
  # Cross-account access role for CI/CD
  CrossAccountCICDRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-cicd-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${ProjectName}-external-id'
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
              DateGreaterThan:
                'aws:CurrentTime': '2024-01-01T00:00:00Z'
              DateLessThan:
                'aws:CurrentTime': '2025-12-31T23:59:59Z'
      MaxSessionDuration: 3600  # 1 hour
      Policies:
        - PolicyName: CICDDeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # CloudFormation permissions
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:ValidateTemplate
                Resource: !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stack/${ProjectName}-*'
              
              # S3 permissions for deployment artifacts
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${ProjectName}-deployment-artifacts/*'
              
              # IAM permissions (restricted)
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:UpdateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:ListRolePolicies
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-*'
                Condition:
                  StringEquals:
                    'iam:PermissionsBoundary': !Ref PermissionsBoundaryPolicy
              
              # Deny dangerous IAM actions
              - Effect: Deny
                Action:
                  - iam:CreateUser
                  - iam:CreateAccessKey
                  - iam:DeleteUser
                  - iam:AttachUserPolicy
                  - iam:PutUserPolicy
                  - iam:CreatePolicy
                  - iam:DeletePolicy
                Resource: '*'

  # Permissions boundary for limiting privileges
  PermissionsBoundaryPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${ProjectName}-permissions-boundary'
      Description: Permissions boundary to limit maximum privileges
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow basic AWS service interactions
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/${ProjectName}/*'
          
          # Allow CloudWatch metrics
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
            Resource: '*'
            Condition:
              StringLike:
                'cloudwatch:namespace': !Sub '${ProjectName}/*'
          
          # Allow S3 access to project buckets only
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !Sub 'arn:aws:s3:::${ProjectName}-*'
              - !Sub 'arn:aws:s3:::${ProjectName}-*/*'
          
          # Deny access to sensitive services
          - Effect: Deny
            Action:
              - iam:CreatePolicy
              - iam:DeletePolicy
              - iam:CreateUser
              - iam:DeleteUser
              - iam:AttachUserPolicy
              - iam:DetachUserPolicy
              - organizations:*
              - account:*
            Resource: '*'
          
          # Deny access to other accounts' resources
          - Effect: Deny
            Action: '*'
            Resource: '*'
            Condition:
              StringNotEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  # Developer role with restricted permissions
  DeveloperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-developer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:RequestedRegion': 
                  - us-east-1
                  - us-west-2
              DateGreaterThan:
                'aws:CurrentTime': '09:00:00Z'
              DateLessThan:
                'aws:CurrentTime': '18:00:00Z'
      PermissionsBoundary: !Ref PermissionsBoundaryPolicy
      Policies:
        - PolicyName: DeveloperBasePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Read-only access to most services
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - s3:Get*
                  - s3:List*
                  - logs:Describe*
                  - logs:Get*
                  - cloudformation:Describe*
                  - cloudformation:Get*
                  - cloudformation:List*
                  - lambda:Get*
                  - lambda:List*
                Resource: '*'
              
              # Limited write access to development resources
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${ProjectName}-dev-*/*'
              
              # CloudFormation stack management for dev stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                Resource: !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stack/${ProjectName}-dev-*'
              
              # Deny production resource modification
              - Effect: Deny
                Action:
                  - ec2:TerminateInstances
                  - ec2:StopInstances
                  - rds:DeleteDBInstance
                  - s3:DeleteBucket
                Resource: '*'
                Condition:
                  StringLike:
                    'aws:ResourceTag/Environment': 'production'

  # Security audit role
  SecurityAuditRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-security-audit-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
              StringEquals:
                'sts:ExternalId': !Sub '${ProjectName}-audit-external-id'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecurityAudit
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: AdditionalSecurityAuditPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow Config rule evaluation
              - Effect: Allow
                Action:
                  - config:GetComplianceDetailsByConfigRule
                  - config:GetComplianceDetailsByResource
                  - config:GetComplianceSummaryByConfigRule
                  - config:GetComplianceSummaryByResourceType
                Resource: '*'
              
              # Allow GuardDuty findings access
              - Effect: Allow
                Action:
                  - guardduty:GetFindings
                  - guardduty:ListFindings
                  - guardduty:GetDetector
                  - guardduty:ListDetectors
                Resource: '*'
              
              # Allow Security Hub access
              - Effect: Allow
                Action:
                  - securityhub:GetFindings
                  - securityhub:GetInsights
                  - securityhub:GetComplianceStatus
                Resource: '*'

  # Lambda execution role with security restrictions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaSecurityPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow KMS operations for encryption
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Sub 'arn:aws:kms:*:${AWS::AccountId}:key/*'
                Condition:
                  StringEquals:
                    'kms:ViaService': 
                      - !Sub 's3.${AWS::Region}.amazonaws.com'
                      - !Sub 'secretsmanager.${AWS::Region}.amazonaws.com'
              
              # Allow Secrets Manager access
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:*:${AWS::AccountId}:secret:${ProjectName}/*'
              
              # Deny network modifications
              - Effect: Deny
                Action:
                  - ec2:CreateVpc
                  - ec2:DeleteVpc
                  - ec2:ModifyVpc*
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteSecurityGroup
                  - ec2:AuthorizeSecurityGroup*
                  - ec2:RevokeSecurityGroup*
                Resource: '*'

  # Instance profile for EC2 instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-ec2-instance-profile'
      Roles:
        - !Ref EC2InstanceRole

  # EC2 instance role with security restrictions
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-ec2-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      PermissionsBoundary: !Ref PermissionsBoundaryPolicy
      Policies:
        - PolicyName: EC2SecurityPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # CloudWatch agent permissions
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              
              # Systems Manager permissions
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/${ProjectName}/*'
              
              # S3 access for application data
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${ProjectName}-application-data/*'
              
              # Deny metadata service v1 (force IMDSv2)
              - Effect: Deny
                Action: '*'
                Resource: '*'
                Condition:
                  NumericEquals:
                    'ec2:MetadataHttpTokens': '1'

  # Group for power users
  PowerUsersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${ProjectName}-power-users'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: PowerUserRestrictions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Deny IAM policy modifications
              - Effect: Deny
                Action:
                  - iam:CreatePolicy
                  - iam:DeletePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicyVersion
                  - iam:SetDefaultPolicyVersion
                Resource: '*'
              
              # Deny organization modifications
              - Effect: Deny
                Action:
                  - organizations:*
                Resource: '*'
              
              # Deny billing access
              - Effect: Deny
                Action:
                  - aws-portal:*
                  - budgets:*
                  - ce:*
                Resource: '*'

  # Password policy for users
  PasswordPolicy:
    Type: AWS::IAM::AccountPasswordPolicy
    Properties:
      AllowUsersToChangePassword: true
      HardExpiry: false
      MaxPasswordAge: 90
      MinimumPasswordLength: 14
      PasswordReusePrevention: 5
      RequireLowercaseCharacters: true
      RequireNumbers: true
      RequireSymbols: true
      RequireUppercaseCharacters: true

Outputs:
  CrossAccountCICDRoleArn:
    Description: ARN of the cross-account CI/CD role
    Value: !GetAtt CrossAccountCICDRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CrossAccountCICDRoleArn'

  DeveloperRoleArn:
    Description: ARN of the developer role
    Value: !GetAtt DeveloperRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeveloperRoleArn'

  SecurityAuditRoleArn:
    Description: ARN of the security audit role
    Value: !GetAtt SecurityAuditRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAuditRoleArn'

  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleArn'

  EC2InstanceProfileArn:
    Description: ARN of the EC2 instance profile
    Value: !GetAtt EC2InstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2InstanceProfileArn'

  PermissionsBoundaryPolicyArn:
    Description: ARN of the permissions boundary policy
    Value: !Ref PermissionsBoundaryPolicy
    Export:
      Name: !Sub '${AWS::StackName}-PermissionsBoundaryPolicyArn'